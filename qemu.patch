diff --git hw/riscv/virt.c hw/riscv/virt.c
index d171e74f7b..ea9842654b 100644
--- hw/riscv/virt.c
+++ hw/riscv/virt.c
@@ -80,6 +80,13 @@ static const MemMapEntry virt_memmap[] = {
     [VIRT_APLIC_M] =      {  0xc000000, APLIC_SIZE(VIRT_CPUS_MAX) },
     [VIRT_APLIC_S] =      {  0xd000000, APLIC_SIZE(VIRT_CPUS_MAX) },
     [VIRT_UART0] =        { 0x10000000,         0x100 },
+    [VIRT_UART1] =        { 0x10000100,         0x100 },
+    [VIRT_UART2] =        { 0x10000200,         0x100 },
+    [VIRT_UART3] =        { 0x10000300,         0x100 },
+    [VIRT_UART4] =        { 0x10000400,         0x100 },
+    [VIRT_UART5] =        { 0x10000500,         0x100 },
+    [VIRT_UART6] =        { 0x10000600,         0x100 },
+    [VIRT_UART7] =        { 0x10000700,         0x100 },
     [VIRT_VIRTIO] =       { 0x10001000,        0x1000 },
     [VIRT_FW_CFG] =       { 0x10100000,          0x18 },
     [VIRT_FLASH] =        { 0x20000000,     0x4000000 },
@@ -909,22 +916,26 @@ static void create_fdt_uart(RISCVVirtState *s, const MemMapEntry *memmap,
 {
     g_autofree char *name = NULL;
     MachineState *ms = MACHINE(s);
-
-    name = g_strdup_printf("/soc/serial@%lx", (long)memmap[VIRT_UART0].base);
-    qemu_fdt_add_subnode(ms->fdt, name);
-    qemu_fdt_setprop_string(ms->fdt, name, "compatible", "ns16550a");
-    qemu_fdt_setprop_cells(ms->fdt, name, "reg",
-        0x0, memmap[VIRT_UART0].base,
-        0x0, memmap[VIRT_UART0].size);
-    qemu_fdt_setprop_cell(ms->fdt, name, "clock-frequency", 3686400);
-    qemu_fdt_setprop_cell(ms->fdt, name, "interrupt-parent", irq_mmio_phandle);
-    if (s->aia_type == VIRT_AIA_TYPE_NONE) {
-        qemu_fdt_setprop_cell(ms->fdt, name, "interrupts", UART0_IRQ);
-    } else {
-        qemu_fdt_setprop_cells(ms->fdt, name, "interrupts", UART0_IRQ, 0x4);
-    }
-
-    qemu_fdt_setprop_string(ms->fdt, "/chosen", "stdout-path", name);
+    int i;
+    
+    for (i = 0; i < UART_COUNT; i++) {
+		name = g_strdup_printf("/soc/serial@%lx", (long)memmap[VIRT_UART0+i].base);
+		qemu_fdt_add_subnode(ms->fdt, name);
+		qemu_fdt_setprop_string(ms->fdt, name, "compatible", "ns16550a");
+		qemu_fdt_setprop_cells(ms->fdt, name, "reg",
+		    0x0, memmap[VIRT_UART0+i].base,
+		    0x0, memmap[VIRT_UART0+i].size);
+		qemu_fdt_setprop_cell(ms->fdt, name, "clock-frequency", 3686400);
+		qemu_fdt_setprop_cell(ms->fdt, name, "interrupt-parent", irq_mmio_phandle);
+		if (s->aia_type == VIRT_AIA_TYPE_NONE) {
+		    qemu_fdt_setprop_cell(ms->fdt, name, "interrupts", UART0_IRQ+i);
+		} else {
+		    qemu_fdt_setprop_cells(ms->fdt, name, "interrupts", UART0_IRQ+i, 0x4);
+		}
+		
+		if (i == 0)
+		    qemu_fdt_setprop_string(ms->fdt, "/chosen", "stdout-path", name);
+	}
 }
 
 static void create_fdt_rtc(RISCVVirtState *s, const MemMapEntry *memmap,
@@ -1574,9 +1585,19 @@ static void virt_machine_init(MachineState *machine)
 
     create_platform_bus(s, mmio_irqchip);
 
+#if 0
     serial_mm_init(system_memory, memmap[VIRT_UART0].base,
         0, qdev_get_gpio_in(mmio_irqchip, UART0_IRQ), 399193,
         serial_hd(0), DEVICE_LITTLE_ENDIAN);
+#endif
+    
+    /* NS16550a serial ports */
+    for (i = 0; i < UART_COUNT; i++) {
+        serial_mm_init(system_memory, memmap[VIRT_UART0+i].base,
+            0, qdev_get_gpio_in(mmio_irqchip, UART0_IRQ+i), 399193,
+            serial_hd(i), DEVICE_LITTLE_ENDIAN);
+    }
+
 
     sysbus_create_simple("goldfish_rtc", memmap[VIRT_RTC].base,
         qdev_get_gpio_in(mmio_irqchip, RTC_IRQ));
diff --git include/hw/riscv/virt.h include/hw/riscv/virt.h
index 3db839160f..e5767fa474 100644
--- include/hw/riscv/virt.h
+++ include/hw/riscv/virt.h
@@ -75,6 +75,13 @@ enum {
     VIRT_APLIC_M,
     VIRT_APLIC_S,
     VIRT_UART0,
+    VIRT_UART1,
+    VIRT_UART2,
+    VIRT_UART3,
+    VIRT_UART4,
+    VIRT_UART5,
+    VIRT_UART6,
+    VIRT_UART7,
     VIRT_VIRTIO,
     VIRT_FW_CFG,
     VIRT_IMSIC_M,
@@ -89,7 +96,8 @@ enum {
 
 enum {
     UART0_IRQ = 10,
-    RTC_IRQ = 11,
+    UART_COUNT = 8,
+    RTC_IRQ = 9,
     VIRTIO_IRQ = 1, /* 1 to 8 */
     VIRTIO_COUNT = 8,
     PCIE_IRQ = 0x20, /* 32 to 35 */
